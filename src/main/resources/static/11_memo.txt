[빈 스코프란?]
지금까지 우리는 스프링 빈이 스프링 컨테이너의 시작과 함께 생성되어서 스프링 컨테이너가 종료될 때 까지 유지된다고 학습했다.
이것은 스프링 빈이 기본적으로 싱글톤 스코프로 생성되기 때문이다.
스코프는 번역 그대로 빈이 존재할 수 있는 범위를 뜻한다.
스프링은 다음과 같은 다양한 스코프를 지원한다. @Scope("prototype")
    - 싱글톤: 기본 스코프, 스프링 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프이다.
    - 프로토타입: 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입까지만 관여하고 더는 관리하지 않는 매우 짧은 범위의 스코프이다. (종료 메서드 호출 안됨)
웹 관련 스코프
    - request: 웹 요청이 들어오고 나갈때 까지 유지되는 스코프이다.
    - session: 웹 세션이 생성되고 종료될 때 까지 유지되는 스코프이다.
    - application: 웹의 서블릿 컨텍스트와 같은 범위로 유지되는 스코프이다.

[프로토타입 스코프]
싱글톤 스코프의 빈을 조회하면 항상 같은 인스턴스의 스프링 빈을 반환한다.
하지만 프로토타입 스코프 빈을 조회하면 항상 새로운 인스턴스를 생성해서 반환한다!
1. 프로토타입 빈 요청
    - 프로토타입 스코프의 빈을 스프링 컨테이너에 요청한다.
    - 스프린 컨테이너는 이 시점에 프로토타입 빈을 생성하고, 필요한 의존관계를 주입한다.
2. 프로토타입 빈 요청
    - 스프링 컨테이너는 생성한 프로토타입 빈을 클라이언트에 반환한다.
    - 이후에 스프링 컨테이너에 같은 요청이 오면 항상 새로운 프로토타입 빈을 생성해서 반환한다.

[웹 스코프]
웹 환경에서만 동작한다.
프로토타입과 다르게 스프링이 해당 스코프의 종료시점까지 관리한다.
1. request: HTTP 요청 하나가 들어오고 나갈 때 까지 유지되는 스코프,
    각각의 HTTP 요청마다 별도의 빈 인스턴스가 생성되고, 관리된다.
2. session: HTTP Session 과 동일한 생명주기를 가지는 스코프
3. application: 서블릿 컨텍스트(ServletContext)와 동일한 생명주기를 가지는 스코프
4. websocket: 웹 소켓과 동일한 생명주기를 가지는 스코프

[스코프와 프록시]
1. 동작 정리
    - CGLIB 라는 라이브러리로 내 클래스를 상속 받은 가짜 프록시 객체를 만들어서 주입한다.
    - 이 가짜 프록시 객체는 실제 요청이 오면 그때 내부에서 실제 빈을 요청하는 위임 로직이 들어있다.
    - 가짜 프록시 객체는 실제 request scope 와는 관계가 없다.
    - 그냥 가짜이고, 내부에 단순한 위임 로직만 있고, 싱글톤 처럼 동작한다.
2. 특징 정리
    - 프록시 객체 덕분에 클라이언트는 마치 싱글톤 빈을 사용하듯이 편리하게 request scope 를 사용할 수 있다.
    - 사실 Provider 를 사용하든, 프록시를 사용하든 핵심 아이디어는 진짜 객체 조회를 꼭 필요한 시점까지 지연처리 한다는 점이다.
    - 단지 애노테이션 설정 변경만으로 원본 객체를 프록시 객체로 대체할 수 있다.
    - 이것이 바로 다형성과 DI 컨테이너가 가진 큰 강점이다.
    - 꼭 웹 스코프가 아니어도 프록시는 사용할 수 있다.
3. 주의점
    - 마치 싱글톤을 사용하는 것 같지만 다르게 동작하기 때문에 결국 주의해서 사용해야 한다.
    - 이런 특별한 scope 는 꼭 필요한 곳에만 최소화해서 사용하자, 무분별하게 사용하면 유지보수하기 어려워진다.