[IoC, DI 그리고 컨테이너]
1. 제어의 역전 IoC(Inversion of Control)
    - 기존 프로그램은 클라이언트 구현 객체가 스스로 필요한 서버 구현 객체를 생성하고, 연결하고, 실행했다
    - 한마디로 구현 객체가 프로그램의 제어 흐름을 스스로 조종했다는 것.
    - 반면에 AppConfig가 등장한 이후에 구현 객체는 자신의 로직을 실행하는 역할만 담당함.
    - 프로그램의 제어 흐름은 AppConfig가 가져간다.
    - 예를들어 OrderServiceImpl은 필요한 인터페이스들을 호출하지만 어떤 구현 객체들이 실행될 지 모른다.
    - 이렇듯 프로그램의 제어 흐름을 직접 제저하는 것이 아니라 외부에서 관리하는 것을 제어의 역전(IoC)이라 한다.
2. 프레임워크 vs 라이브러리
    - 프레임워크가 내가 작성한 코드를 제어하고, 대신 실행하면 그것은 프레임워크.
    - 반면에 내가 작성한 코드가 직접 제어의 흐름을 담당하면 그것을 라이브러리.
3. 의존관계 주입 DI(Dependency Injection)
    - OrderServiceImpl은 DiscountPolicy 인터페이스에 의존한다.
    실제 어떤 구현 객체가 사용될지는 모른다.
    - 의존관계는 정적인 클래스 의존관계와, 실행 시점에 결정되는 동적인 객체(인스턴스) 의존 관계 둘을 분리해서 생각
    3-1. 정적인 클래스 의존관계
        클래스가 사용하는 import 코드만 보고 의존관게를 쉽게 판단할 수 있다.
        그래서 애플리케이션을 실행하지 않아도 분석이 가능하다.
    3-2. 동적인 객체 의존관계
        - 애플리케이션 실행 시점에 생성된 객체 인스턴스의 참조과 연결된 의존관계다.
        - 애플리케이션 실행 시점(런타임)에 외부에서 실제 구현 객체를 생성하고 클라이언트에 전달해서
        클라이언트와 서버의 실제 의존관계가 연결되는 것을 '의존관계 주입'이라 한다.
        - 객체 인스턴스를 생성하고, 그 참조값을 전달해서 연결된다.
        - 의존관계 주입을 사용하면 정적인 클래스 의존 관계를 변경하지 않고,
        동적인 객체 인스턴스 의존관계를 쉽게 변경할 수 있다.
4. IoC 컨테이너, DI 컨테이너
    - AppConfig처럼 객체를 생성하고 관리하면서 의존관계를 연결해 주는 것을 IoC, DI 컨테이너라 한다.

[스프링 컨테이너]
- ApplicationContext 를 스프링 컨테이너라 한다.
- 기존에는 개발자가 AppConfig 를 사용해서 직접 객체를 생성하고 DI를 했지만, 이제부터는 스프링 컨테이너를 통해서 사용한다.
- 스프링 컨테이너는 @Configuration 이 붙은 AppConfig 를 설정(구성) 정보로 사용한다.
- 여기서 @Bean 이라 적힌 메서드를 모두 호출해서 반환된 객체를 스프링 컨테이너에 등록한다.
- 이렇게 스프링 컨테이너에 등록된 객체를 스프링 빈이라 한다.
- 스프링 빈은 @Bean 이 붙은 메서드의 명을 스프링 빈의 이름으로 사용한다. ( memberService , orderService )
- 이전에는 개발자가 필요한 객체를 AppConfig 를 사용해서 직접 조회했지만,
이제부터는 스프링 컨테이너를 통해서 필요한 스프링 빈(객체)를 찾아야 한다.
- 스프링 빈은 applicationContext.getBean() 메서드를 사용해서 찾을 수 있다.
- 기존에는 개발자가 직접 자바코드로 모든 것을 했다면 이제부터는 스프링 컨테이너에 객체를 스프링 빈으로 등록하고,
스프링 컨테이너에서 스프링 빈을 찾아서 사용하도록 변경되었다.